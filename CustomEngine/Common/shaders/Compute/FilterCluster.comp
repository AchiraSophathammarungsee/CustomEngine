#version 430 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct VolumeTileAABB
{
  vec4 minPoint;
  vec4 maxPoint;
};

layout (std430, binding = 1) buffer clusterAABB
{
  VolumeTileAABB cluster[ ];
};

layout (std430, binding = 2) buffer screenToView
{
  mat4 inverseProjection;
  uvec4 tileSizes;
  uvec2 screenDimensions;
  float scale;
  float bias;
};

layout (std430, binding = 7) buffer activeClustersSSBO
{
  bool activeClusters[];
};

layout (binding = 0) uniform sampler2D depthBuffer;

uniform float zFar;
uniform float zNear;

// function declarations
uint getClusterIndex(vec3 pixelCoord);

void main()
{
  // get depth value
  vec2 screenCoord = gl_GlobalInvocationID.xy / screenDimensions.xy;
  float z = texture(depthBuffer, screenCoord).r;

  // get cluster id from depth
  uint clustID = getClusterIndex(vec3(gl_GlobalInvocationID.xy, z));
  activeClusters[clustID] = true;
}

float linearDepth(float depthSample)
{
  float depthRange = 2.0 * depthSample - 1.0;
  float linear = 2.0 * zNear * zFar / (zFar + zNear - depthRange * (zFar - zNear));
  return linear;
}

uint getClusterIndex(vec3 pixelCoord)
{
  // Uses equation (3) from Building a Cluster Grid section
  uint clusterZVal  = uint(max(log2(linearDepth(pixelCoord.z)) * scale + bias, 0.0));

  uvec3 clusters    = uvec3( uvec2( pixelCoord.xy / tileSizes[3]), clusterZVal);
  uint clusterIndex = clusters.x +
                      tileSizes.x * clusters.y +
                      (tileSizes.x * tileSizes.y) * clusters.z;
  return clusterIndex;
}